name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

# Environment variables available to all jobs
env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  FRONTEND_DIR: 'frontend'
  BACKEND_DIR: 'backend'
  DOCKER_REGISTRY: 'ghcr.io'
  AWS_REGION: 'us-west-2'
  ECR_REPOSITORY: 'ghn-app'

# Concurrency group to ensure only one deployment runs at a time per environment
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.environment || 'default' }}
  cancel-in-progress: true

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Run GitGuardian scan
        uses: GitGuardian/ggshield-action@master
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.pull_request && github.event.pull_request.base.sha || github.event.before }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request && github.event.pull_request.base.sha || '' }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'GHN'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 7
            --enableRetired

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  lint-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: |
          cd ${{ env.FRONTEND_DIR }} && npm ci
          cd ../${{ env.BACKEND_DIR }} && npm ci

      - name: Run ESLint
        run: |
          cd ${{ env.FRONTEND_DIR }} && npm run lint -- --max-warnings 0
          cd ../${{ env.BACKEND_DIR }} && npm run lint -- --max-warnings 0

      - name: Run Prettier Check
        run: |
          cd ${{ env.FRONTEND_DIR }} && npm run format:check
          cd ../${{ env.BACKEND_DIR }} && npm run format:check

      - name: Type Check
        run: |
          cd ${{ env.FRONTEND_DIR }} && npm run type-check
          cd ../${{ env.BACKEND_DIR }} && npm run type-check
  performance-test:
    needs: [e2e-tests]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |  
            ${{ env.FRONTEND_DIR }}/package-lock.json
            ${{ env.BACKEND_DIR }}/package-lock.json

      - name: Install Dependencies
        run: |
          cd ${{ env.FRONTEND_DIR }} && npm ci
          cd ../${{ env.BACKEND_DIR }} && npm ci

      - name: Run Lighthouse CI
        id: lighthouse
        continue-on-error: true
        run: |
          cd ${{ env.FRONTEND_DIR }}
          npx @lhci/cli@0.11.x autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run k6 Load Tests
        id: k6
        uses: grafana/k6-action@v0.2.0
        with:
          filename: ${{ env.BACKEND_DIR }}/tests/performance/load-test.js
          flags: --out json=results.json
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}

      - name: Analyze Performance Results
        id: analysis
        if: always()
        run: |
          cd ${{ env.BACKEND_DIR }}/tests/performance
          node ../scripts/analyze-performance.js results.json

      - name: Upload Performance Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            ${{ env.FRONTEND_DIR }}/.lighthouseci
            ${{ env.BACKEND_DIR }}/tests/performance/results.json

      - name: Notify Performance Results
        if: always()
        uses: ./.github/actions/slack-notify
        with:
          stage: 'Performance Tests'
          status: ${{ job.status }}
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          details: |
            Lighthouse CI: ${{ steps.lighthouse.outcome }}
            k6 Load Tests: ${{ steps.k6.outcome }}
            Performance Analysis: ${{ steps.analysis.outcome }}
      - uses: actions/checkout@v3
      
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
      
      - name: OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable'
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  frontend-quality:
    name: Frontend Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.FRONTEND_DIR }}/package-lock.json'
      
      - name: Cache TypeScript
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.FRONTEND_DIR }}/node_modules/.tmp/*.tsbuildinfo
          key: ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig*.json') }}
          restore-keys: |
            ${{ runner.os }}-typescript-

      - name: Install Dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npm ci
          npm install -g @commitlint/cli @commitlint/config-conventional
      
      - name: Lint Commit Messages
        run: |
          npm install -g @commitlint/cli @commitlint/config-conventional
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose
          else
            npx commitlint --from ${{ github.event.before }} --to ${{ github.event.after }} --verbose || true
          fi
      
      - name: ESLint
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run lint -- --max-warnings 0
      
      - name: Type Check
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run type-check
      
      - name: Unit Tests
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run test -- --coverage --ci --maxWorkers=2
      
      - name: Build
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build
      
      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  backend-quality:
    name: Backend Quality Checks
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '${{ env.BACKEND_DIR }}/requirements.txt'
      
      - name: Install Dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Code Style & Linting
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          black . --check
          isort . --check-only
          flake8 .
          pylint **/*.py
          bandit -r .
      
      - name: Type Check
        working-directory: ${{ env.BACKEND_DIR }}
        run: mypy .
      
      - name: Unit Tests
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pytest --cov=. --cov-report=xml --cov-report=term-missing --junitxml=test-results.xml
      
      - name: Integration Tests
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pytest tests/integration --cov=. --cov-report=xml --cov-report=term-missing
      
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ${{ env.BACKEND_DIR }}/coverage.xml

  e2e-tests:
    needs: [frontend-quality, backend-quality]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        containers: [1, 2]  # Run tests in parallel with 2 instances
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.FRONTEND_DIR }}/package-lock.json'
      
      - name: Install Dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci
      
      - name: Setup Environment
        run: docker-compose -f docker-compose.test.yml up -d
      
      - name: Run Cypress Tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: ${{ env.FRONTEND_DIR }}
          start: npm run dev
          wait-on: 'http://localhost:3000'
          record: true
          parallel: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Store Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-results
          path: cypress/videos/

      - name: Notify Test Results
        if: always()
        uses: ./.github/actions/slack-notify
        with:
          stage: 'E2E Tests'
          status: ${{ job.status }}
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          environment: ${{ github.event.inputs.environment || 'staging' }}



  build-and-push:
    needs: [security-scan, e2e-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}
      
      - name: Build and push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.FRONTEND_DIR }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Backend
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.BACKEND_DIR }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}-backend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [build-and-push, performance-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GithubActionsSession
      
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ghn-cluster --region ${{ env.AWS_REGION }}
      
      - name: Deploy to Kubernetes
        run: |
          # Set environment-specific variables
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            NAMESPACE="production"
            REPLICAS="3"
          else
            NAMESPACE="staging"
            REPLICAS="1"
          fi
          
          # Update deployment manifests with current image tags
          sed -i "s|image:.*|image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:${{ github.sha }}|g" k8s/$NAMESPACE/*.yaml
          
          # Apply manifests
          kubectl apply -f k8s/$NAMESPACE/
          
          # Wait for rollout
          kubectl -n $NAMESPACE rollout status deployment/frontend
          kubectl -n $NAMESPACE rollout status deployment/backend
      
      - name: Verify Deployment
        run: |
          # Health check endpoints
          HEALTH_CHECK_FRONTEND="https://api.${{ github.event.inputs.environment }}.ghn.dev/health"
          HEALTH_CHECK_BACKEND="https://api.${{ github.event.inputs.environment }}.ghn.dev/api/health"
          
          # Wait for endpoints to be healthy
          timeout 300 bash -c 'until curl -s $HEALTH_CHECK_FRONTEND | grep -q "healthy"; do sleep 5; done'
          timeout 300 bash -c 'until curl -s $HEALTH_CHECK_BACKEND | grep -q "healthy"; do sleep 5; done'
      
      - name: Notify Deployment Status
        if: always()
        uses: ./.github/actions/slack-notify
        with:
          stage: ${{ format('Deployment to {0}', github.event.inputs.environment || 'staging') }}
          status: ${{ job.status }}
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GithubActionsSession

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup old container images
        uses: snok/container-retention-policy@v1
        with:
          image-names: |
            ghn-frontend
            ghn-backend
          cut-off: 2 weeks ago UTC
          account-type: personal
          token: ${{ secrets.GITHUB_TOKEN }}
          keep-at-least: 5
          skip-tags: |
            latest
            stable
            prod

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ghn-cluster --region ${{ env.AWS_REGION }}

      - name: Cleanup completed pods
        run: |
          # Remove completed pods older than 24 hours
          kubectl get pods --all-namespaces -o json | jq '.items[] | select(.status.phase == "Succeeded") | select(.status.startTime < (now - 86400))' | kubectl delete -f -

      - name: Cleanup failed pods
        run: |
          # Remove failed pods older than 24 hours
          kubectl get pods --all-namespaces -o json | jq '.items[] | select(.status.phase == "Failed") | select(.status.startTime < (now - 86400))' | kubectl delete -f -

      - name: Cleanup old ConfigMaps
        run: |
          # Keep only the last 10 ConfigMaps per namespace
          for ns in $(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}'); do
            kubectl get configmaps -n $ns --sort-by=.metadata.creationTimestamp -o name | head -n -10 | xargs -r kubectl delete -n $ns
          done

      - name: Notify Cleanup Status
        if: always()
        uses: ./.github/actions/slack-notify
        with:
          stage: 'Resource Cleanup'
          status: ${{ job.status }}
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}

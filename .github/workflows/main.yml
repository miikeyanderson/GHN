name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

# Define environment variables
env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  FRONTEND_DIR: 'frontend'
  BACKEND_DIR: 'backend'

jobs:
  frontend-checks:
    name: Frontend Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for git info
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '${{ env.FRONTEND_DIR }}/package-lock.json'
    
    - name: Install Dependencies
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm ci
    
    - name: Type Check
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm run type-check
    
    - name: Lint
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm run lint
    
    - name: Run Tests
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm run test -- --coverage
    
    - name: Build
      working-directory: ${{ env.FRONTEND_DIR }}
      env:
        VITE_APP_ENV: production
        VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        VITE_API_URL: ${{ secrets.API_URL }}
      run: npm run build

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: ${{ env.FRONTEND_DIR }}/dist
        retention-days: 7

  backend-checks:
    name: Backend Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: '${{ env.BACKEND_DIR }}/requirements.txt'
    
    - name: Install Dependencies
      working-directory: ${{ env.BACKEND_DIR }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pylint black mypy
    
    - name: Run Linting
      working-directory: ${{ env.BACKEND_DIR }}
      run: |
        black . --check
        pylint **/*.py
    
    - name: Type Check
      working-directory: ${{ env.BACKEND_DIR }}
      run: mypy .
    
    - name: Run Tests with Coverage
      working-directory: ${{ env.BACKEND_DIR }}
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      run: |
        pytest --cov=. --cov-report=xml
    
    - name: Upload Coverage Report
      uses: codecov/codecov-action@v3
      with:
        files: ${{ env.BACKEND_DIR }}/coverage.xml

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [frontend-checks, backend-checks]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: monitor
    
    - name: Run OWASP ZAP Scan
      uses: zaproxy/action-baseline@v0.9.0
      with:
        target: ${{ secrets.API_URL }}

  deploy-staging:
    name: Deploy to Staging
    needs: [frontend-checks, backend-checks, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download Frontend Build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: ${{ env.FRONTEND_DIR }}/dist
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Deploy Frontend to S3
      run: |
        aws s3 sync ${{ env.FRONTEND_DIR }}/dist s3://${{ secrets.S3_BUCKET_STAGING }} --delete
    
    - name: Deploy Backend to ECS
      run: |
        aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_STAGING }} \
                              --service ${{ secrets.ECS_SERVICE_STAGING }} \
                              --force-new-deployment
    
    - name: Upload Source Maps to Sentry
      working-directory: ${{ env.FRONTEND_DIR }}
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      run: |
        npm install -g @sentry/cli
        sentry-cli releases new "ghn-mvp@${GITHUB_SHA}"
        sentry-cli releases files "ghn-mvp@${GITHUB_SHA}" upload-sourcemaps ./dist
        sentry-cli releases finalize "ghn-mvp@${GITHUB_SHA}"
    
    - name: Notify Deployment Status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://ghn-mvp.com
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Wait for Manual Approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.token }}
        approvers: miikeyanderson
        minimum-approvals: 1
        timeout-minutes: 1440  # 24 hours
    
    - uses: actions/checkout@v3
    
    - name: Download Frontend Build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: ${{ env.FRONTEND_DIR }}/dist
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Deploy Frontend to S3
      run: |
        aws s3 sync ${{ env.FRONTEND_DIR }}/dist s3://${{ secrets.S3_BUCKET_PROD }} --delete
    
    - name: Deploy Backend to ECS
      run: |
        aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_PROD }} \
                              --service ${{ secrets.ECS_SERVICE_PROD }} \
                              --force-new-deployment
    
    - name: Create Sentry Release
      working-directory: ${{ env.FRONTEND_DIR }}
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      run: |
        npm install -g @sentry/cli
        sentry-cli releases new "ghn-mvp@${GITHUB_SHA}"
        sentry-cli releases set-commits "ghn-mvp@${GITHUB_SHA}" --auto
        sentry-cli releases files "ghn-mvp@${GITHUB_SHA}" upload-sourcemaps ./dist
        sentry-cli releases finalize "ghn-mvp@${GITHUB_SHA}"
    
    - name: Notify Deployment Status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
